{"id":479766131,"lang":"java","time":"6 months, 2 weeks","timestamp":1618244596,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/479766131/","is_pending":"Not Pending","title":"Minimum Depth of Binary Tree","memory":"59.6 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public int minDepth(TreeNode root) {\n        if(root==null)\n            return 0;\n        else if(root.left==null||root.right==null){\n            if(root.left==null)\n                return minDepth(root.right)+1;\n            else\n                return minDepth(root.left)+1;\n        }\n        else{\n            int l=minDepth(root.left)+1;\n            int r=minDepth(root.right)+1;\n            if(r<l)\n                return r;\n            else\n                return l;\n        }\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111","title_slug":"minimum-depth-of-binary-tree"}